{"version":3,"sources":["store/loadTodos.ts","store/_loading.ts","store/index.ts","components/Start.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todos","type","payload","rootReducer","combineReducers","action","loading","selectors","state","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useSelector","Start","title","dispatch","useDispatch","className","onClick","disabled","TodoFilter","getInput","useState","searchInput","setSearchInput","typeSelect","setTypeSelect","useEffect","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoList","onTodoSelected","selectedTodo","map","todo","id","completed","classNames","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","isLoad","setIsLoad","loadUser","a","userId","userFromServer","href","email","name","App","fromServer","todosActions","visibleTodos","setVisibleTodos","selectedTodoId","setSelectedTodoId","selectTodoId","todoId","inputType","visibledTodos","filter","toLowerCase","includes","filteringVisibleTodos","condition","length","find","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9aa7c12f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/set',\n  payload: Todo[],\n};\n\nexport type TodosAction = SetTodos;\n\nexport const todosReduser = (\n  todos: Todo[] = [],\n  action: TodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = {\n  settodos: (todos: Todo[]): TodosAction => ({\n    type: 'todos/set',\n    payload: todos,\n  }),\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype LoadingAction = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\nexport const loadingTodos = (loading = false, action: LoadingAction) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading(): StartLoadingAction {\n    return { type: 'START_LOADING' };\n  },\n  finishLoading(): FinishLoadingAction {\n    return { type: 'FINISH_LOADING' };\n  },\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { todosReduser } from './loadTodos';\nimport { loadingTodos } from './_loading';\n\nconst rootReducer = combineReducers({\n  todos: todosReduser,\n  loading: loadingTodos,\n});\n\nexport const selectors = {\n  isLoading: (state: RootState) => state.loading,\n  getTodos: (state: RootState) => state.todos,\n};\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { selectors, useAppSelector } from '../store';\nimport { actions } from '../store/_loading';\n\ntype Props = {\n  title: string;\n};\n\nexport const Start: React.FC<Props> = ({ title }) => {\n  const dispatch = useDispatch();\n  const loading = useAppSelector(selectors.isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"button is-dark\"\n      onClick={() => {\n        const action = actions.startLoading();\n\n        dispatch(action);\n      }}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\ntype Props = {\n  getInput: (searchInput: string, typeSelect: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({ getInput }) => {\n  const [searchInput, setSearchInput] = useState('');\n  const [typeSelect, setTypeSelect] = useState('all');\n\n  useEffect(() => {\n    getInput(searchInput, typeSelect);\n  }, [searchInput, typeSelect]);\n\n  return (\n    <>\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={typeSelect}\n              onChange={(event) => {\n                setTypeSelect(event.target.value);\n              }}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={searchInput}\n            onChange={(event) => {\n              setSearchInput(event.target.value);\n            }}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {searchInput && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  setSearchInput('');\n                }}\n              />\n            )}\n          </span>\n        </p>\n      </form>\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onTodoSelected: (todoId: number) => void,\n  selectedTodo: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onTodoSelected,\n  selectedTodo,\n}) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed === true && (\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={\n                    classNames(\n                      'has-text',\n                      { 'has-text-success': todo.completed },\n                      { 'has-text-danger': !todo.completed },\n                    )\n                  }\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onTodoSelected(todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far fa-eye',\n                      { 'fa-eye-slash': selectedTodo === todo.id },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | undefined,\n  onTodoSelected: (todoId: number) => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onTodoSelected }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoad, setIsLoad] = useState(true);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      if (todo) {\n        const userFromServer = await getUser(todo.userId);\n\n        setUser(userFromServer);\n        setIsLoad(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user || isLoad || !todo\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {todo.id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => onTodoSelected(0)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={\n                  classNames('has-text',\n                    { 'has-text-danger': !todo.completed },\n                    { 'has-text-success': todo.completed })\n                }\n                >\n                  {\n                    todo.completed === false\n                      ? 'Planned'\n                      : 'Done'\n                  }\n\n                </strong>\n\n                {' by '}\n\n                <a href={`${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n      ;\n    </div>\n  );\n};\n","import './App.scss';\nimport { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { Start } from './components/Start';\n\nimport { useAppSelector } from './store';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\n// import { actions as loadingActions } from './store/_loading';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './store/loadTodos';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const loading = useAppSelector(state => state.loading);\n\n  const todos = useAppSelector(state => state.todos);\n\n  useEffect(() => {\n    getTodos()\n      .then(fromServer => dispatch(todosActions.settodos(fromServer)));\n\n    // dispatch(loadingActions.startLoading());\n  }, []);\n\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const todosFilter = (inputType: string, typeSelect: string) => {\n    let visibledTodos = [...todos]\n      .filter(({ title }) => title.toLowerCase().includes(inputType));\n\n    const filteringVisibleTodos = (condition: boolean) => {\n      visibledTodos = todos\n        // eslint-disable-next-line max-len\n        .filter(({ completed, title }) => completed === condition && title.toLowerCase().includes(inputType));\n    };\n\n    if (typeSelect === 'active') {\n      filteringVisibleTodos(false);\n    }\n\n    if (typeSelect === 'completed') {\n      filteringVisibleTodos(true);\n    }\n\n    setVisibleTodos(visibledTodos);\n  };\n\n  const selectTodoId = (todoId: number) => setSelectedTodoId(todoId);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"content is-medium\">Redux list of todos</h1>\n      {!loading && <Start title=\"Start loading\" />}\n\n      {loading && (\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter\n                  getInput={todosFilter}\n                />\n              </div>\n\n              <div className=\"block\">\n                {todos.length < 0\n                  ? <Loader />\n                  : (\n                    <TodoList\n                      todos={visibleTodos}\n                      onTodoSelected={selectTodoId}\n                      selectedTodo={selectedTodoId}\n                    />\n                  ) }\n              </div>\n\n              {selectedTodoId > 0 && (\n                <TodoModal\n                  todo={visibleTodos.find(todo => todo.id === selectedTodoId)}\n                  onTodoSelected={selectTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}